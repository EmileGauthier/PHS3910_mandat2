% Ça part!!!!!

% Étape 1 - Simuler le mouvement / position d'une particule (une position
% par time frame, puis nouvelle simulation de la position pour un nouveau time frame)
% Ici le mouvement brownien dépend de D théorique (qu'on fixe)
% Pourrait direct retourner un vecteur avec les N positions xy de
% l'expérience (par ex N = 100, on a les 100 positions)

% Étape 2 - Simuler une photo réaliste à partir de cette position
% (connaissant cette position) --> PSF  et Poisson. 

% Étape 3 - Fit gaussien pour trouver la position expérimentale de la
% particule, pour chaque photo

% Étape 4 - Avec toutes les positions sur toutes les photos, calculer le
% MSD

% Étape 5 - Avec le MSD, estimer D puis r la taille de la particule

% Étape 6 - Contraste et résolution

% Étape 7 - Paramètres à varier, structure générale qui fait appel à toutes
% ces fonctions. 


% =========================================================================

% Code : 

% Étape 1 : simuler la position d'une particule en mouvement brownien. 

% 1.1 - Coefficient de diffusion D théorique (pour simuler le mouvement)
r_real = 1E-6 ; % Taille réelle de la particule

k_b = 1.380649E-23 ; % Constante de Boltzmann (J/K)
temp = 293 ; % Température absolue du fluide (K)
eta = 1E-3 ; % Viscosité dynamique du fluide
% La viscosité dynamique de l'eau est environ 0,001 Pa * s à 20°C.
D_real = (k_b * temp) / (6 * pi * eta * r_real) ; % Coefficient de diffusion (m^2/s)

delta_t = 0.1e-3 ; % Délai entre chaque frame (1 ms entre chaque frame?)

grossissement = 20; % Magnification du système optique
NA = 1.33; % Ouverture numérique
lmda = 500e-9; % Longueur d'onde captée (m)
pixel_camera = 1.55e-6; % Taille du pixel (m)
n_pixels_camera = [4056;3040]; % Dimensions du détecteur (pixel)

pixel_objet = pixel_camera / grossissement; % Taille du pixel dans l'espace objet

% Maillage dans l'espace image
x_im = 0:pixel_camera:(n_pixels_camera(1)-1)*pixel_camera;
y_im = 0:pixel_camera:(n_pixels_camera(2)-1)*pixel_camera;
[X_im,Y_im] = meshgrid(x_im,y_im);

% 1.2 - Mouvement brownien pour chaque frame : 

function [x2, y2] = brownien(x1, y1, D_real, delta_t)

% Définition de la fonction "brownien" : 
%   Paramètres sortie : x2 et y2 les coordonnées réelles de la particule.
%   Paramètres entrée : x1 et y1 les coordonnées initiales de la particule;
%                       D le coefficient de diffusion théorique;
%                       delta_t le temps entre chaque frame;
%                       

% X = randn retourne un scalaire à partir de la distribution normale


% Calculer les déplacements aléatoires en fonction du coefficient de diffusion
sigma = sqrt(2 * D_real * delta_t); % Écart type du mouvement brownien
x2 = x1 + sigma * randn; % Nouvelle position x
y2 = y1 + sigma * randn; % Nouvelle position y

end 

N = 1000; % Nombre de pas de temps à simuler
x_positions = zeros(1, N); % Initialiser le vecteur des positions x
y_positions = zeros(1, N); % Initialiser le vecteur des positions y
x_positions(1) = 0; % Position initiale x, mettons 0.
y_positions(1) = 0; % Position initiale y, mettons 0.

for i = 2:N
    [x_positions(i), y_positions(i)] = brownien(x_positions(i-1), y_positions(i-1), D_real, delta_t);
end

% -------------------------------------------------------------------------

% Étape 2 - Simuler une photo réaliste à partir de cette position
% (connaissant cette position) --> PSF  et Poisson.

function psf = psf_convolve(x, y, X_im, Y_im, NA, lmda)
%   Paramètres sorties : psf - Maillage 2D correspondant à la convolution
%   du delta Dirac à la position x,y avec la fonction psf.
    r = sqrt((X_im - x).^2 + (Y_im - y).^2);
    temp = (2 .* pi .* NA .* r)./lmda;
    psf = (2*besselj(1,temp) ./ temp).^2;

end

% psf = psf_convolve(100*pixel_camera,200*pixel_camera,X_im,Y_im,NA,lmda);
% mesh(X_im(150:250,50:150),Y_im(150:250,50:150),psf(150:250,50:150))

function intensity_mesh = intensity_mesh_fun(x, y, NA, lambda, X_im, Y_im)
 
%   Paramètres sortie : psf - Maillage 2d de l'intensité
%   Paramètres entrée : x et y - Coordonnées réelles de la particule.
%                       D le coefficient de diffusion théorique;
%                       delta_t le temps entre chaque frame;
%    

    % 2.2 - Générer la PSF discrétisée sur la grille, avec la formule puis
    % la convolution

    % 2.3 -  Bruit de Poisson


end
